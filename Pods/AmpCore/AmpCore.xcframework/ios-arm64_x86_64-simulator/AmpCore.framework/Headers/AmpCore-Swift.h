#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef AMPCORE_SWIFT_H
#define AMPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmpCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



SWIFT_CLASS("_TtC7AmpCore11AdBreakInfo")
@interface AdBreakInfo : NSObject
- (nonnull instancetype)initWithTotalAds:(NSInteger)totalAds duration:(double)duration breakIndex:(NSInteger)breakIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AmpCore6AdInfo")
@interface AdInfo : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title adDescription:(NSString * _Nonnull)adDescription position:(NSInteger)position duration:(double)duration vendor:(NSString * _Nonnull)vendor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AmpCore8AdVendor")
@interface AdVendor : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull FREEWHEEL;)
+ (NSString * _Nonnull)FREEWHEEL SWIFT_WARN_UNUSED_RESULT;
+ (void)setFREEWHEEL:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull GOOGLE;)
+ (NSString * _Nonnull)GOOGLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setGOOGLE:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull YOSPACE;)
+ (NSString * _Nonnull)YOSPACE SWIFT_WARN_UNUSED_RESULT;
+ (void)setYOSPACE:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC7AmpCore9AmpButton")
@interface AmpButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTouch:(id _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIColor;

SWIFT_CLASS("_TtC7AmpCore17AmpAirplay2Button")
@interface AmpAirplay2Button : AmpButton
@property (nonatomic, strong) UIColor * _Nullable tintColor;
- (void)handleTouch:(id _Nonnull)sender;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore16AmpAirplayButton")
@interface AmpAirplayButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class AmpPlayer;
enum PlayerError : NSInteger;
@class StreamInfo;
@class AVMetadataItem;
@class AVAssetTrack;
@class OTTDevice;

/// Protocol used to receive player events.
SWIFT_PROTOCOL("_TtP7AmpCore19PlayerEventObserver_")
@protocol PlayerEventObserver
@optional
/// Callback called when the player is going to handle the url.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)willHandleUrl:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when an external entity is handling the initial connection to the stream, like with SSAI.
- (void)willRequestStream;
/// Callback called when the internal player is created successfully.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onAVPlayerCreation:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the external playback delegate has changed.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onExternalPlaybackChange:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player experiences an error.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param error The error sent.
///
- (void)onAmpError:(AmpPlayer * _Nonnull)ampPlayer error:(enum PlayerError)error code:(NSInteger)code message:(NSString * _Nonnull)message;
/// Callback called when the playback state of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpPlaybackStateChanged' has been renamed to 'onPlaybackStateChanged:'");
/// Callback called when the buffering state of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpBufferingStateChanged' has been renamed to 'onBufferingStateChanged:'");
/// Callback called when the bitrate of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onBitrateChanged:(AmpPlayer * _Nonnull)ampPlayer bitrate:(double)bitrate;
/// Callback called when the audio bitrate of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onAudioTrackChanged:(AmpPlayer * _Nonnull)ampPlayer name:(NSString * _Nonnull)name;
/// Callback called when the position of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpPositionChange:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpPositionChange' has been renamed to 'onPositionChange:'");
/// Callback called when the seconds of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onTimeChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpTimeChange:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpTimeChange' has been renamed to 'onTimeChange:'");
/// Callback called when the position of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param atTime The time of the cuepoint reached.
///
- (void)onCuepointReached:(AmpPlayer * _Nonnull)ampPlayer atTime:(double)atTime;
- (void)onAmpCuepointReached:(AmpPlayer * _Nonnull)ampPlayer atTime:(double)atTime SWIFT_UNAVAILABLE_MSG("'onAmpCuepointReached' has been renamed to 'onCuepointReached(_:)'");
/// Callback called when the playback of the player ends.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpPlaybackEnded' has been renamed to 'onPlaybackEnded:'");
/// Callback called when the player is going to be replayed.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onReplay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpReplay:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpReplay' has been renamed to 'onReplay:'");
/// Callback triggered when the player handled the AVPlayerItemPlaybackStalled notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackStalled:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player handled the UIApplicationWillResignActiveNotification notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onHandledResignActive:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player handled the UIApplicationDidBecomeActiveNotification notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onHandledDidBecomeActive:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player handled the AVPlayerItemNewAccessLogEntry notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onHandleAVPlayerAccess:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the streams information changes.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param streamInfo The struct representing the Stream’s Information.
///
- (void)onStreamInformationChanged:(AmpPlayer * _Nonnull)ampPlayer streamInfo:(StreamInfo * _Nonnull)streamInfo;
/// Callback called when the player is going to be stopped.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player logs are enabled.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onEnableLogs:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player logs are disabled.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onDisableLogs:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when a time metadata (ID3Tag) is reached.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param metadata The array of metadata reached
///
- (void)onTimedMetadata:(AmpPlayer * _Nonnull)ampPlayer metadata:(NSArray<AVMetadataItem *> * _Nonnull)metadata;
/// Callback called when seek begin
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onSeekBegan;
/// Callback called when seek end
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onSeekEnd:(NSTimeInterval)time;
/// Callback called when seek is triggered
/// \param time The timeInterval
///
- (void)onSeek:(double)currentTime :(NSTimeInterval)time;
/// Callback called when player jumps to live
- (void)onGoLive;
/// Callback called on stream forward/backword
- (void)onJumpToTime;
/// Callback called when the player is about to cancel current playback.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)willCancelPlayback:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the stream is ready to play.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the playback information changed.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackInformationChanged:(NSArray<AVAssetTrack *> * _Nonnull)tracks player:(AmpPlayer * _Nonnull)player;
/// Callback called when the player view is tapped.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onTap:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the top bar or bottom bar is visible.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onBarShown:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the top bar or bottom bar is visible.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onHiddenBar:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player view is double tapped.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onDoubleTap:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player enters fullscreen.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onEnterFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player exits fullscreen.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onExitFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player exits fullscreen.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onToggleClosedCaption:(BOOL)isCaptionOn lang:(NSString * _Nullable)lang;
/// Callback called when the player is going to enter fullscreen, before animation starts.
/// \param ampPlayerManager The instance of the player that sends the event.
///
/// \param newFrame The new frame that the player is going to reach.
///
- (void)willEnterFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player is going to exit fullscreen, before animation starts.
/// \param ampPlayerManager The instance of the player that sends the event.
///
/// \param newFrame The new frame that the player is going to reach.
///
- (void)willExitFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player rotates.
/// \param ampPlayerManager The instance of the player that sends the event.
///
/// \param orientation The current orientation.
///
- (void)onRotate:(AmpPlayer * _Nonnull)ampPlayer;
/// ///// –– Ads Callbacks ———–/////////
/// Callback called when DAI IMA ad started.
- (void)onAdPeriodStarted;
/// Callback called when DAI IMA ad ended.
- (void)onAdPeriodEnded;
/// Callback called when ad pod break is started.
- (void)onAdErrorWithError:(NSObject * _Nonnull)error;
/// Callback called when ad pod break is started.
- (void)onAdBreakStartedWithBreak:(AdBreakInfo * _Nullable)break_;
/// Callback called when an ad pod break is ended.
- (void)onAdBreakEndedWithBreak:(AdBreakInfo * _Nullable)break_;
/// Callback called when an ad is requested in a ad pod.
- (void)onAdRequested;
/// Callback called when an ad is requested in a ad pod.
- (void)onAdRequestCompleted;
/// Callback called when each Ad is started in an ad pod.
- (void)onAdStartedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when each Ad is ended in an ad pod.
- (void)onAdEndedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when each Ad is resumed in an ad pod.
- (void)onAdResumedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when each Ad is paused in an ad pod.
- (void)onAdPausedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when an Ad is skipped.
- (void)onAdSkipped;
/// Callback called when Ad time changed.
- (void)onAdProceedWithTime:(double)time;
/// Callback called when player change the mute property.
- (void)onMuteStateChangeWithIsMuted:(BOOL)isMuted;
/// Callback called when player starts a external playback
- (void)onExternalPlaybackStart:(OTTDevice * _Nonnull)device;
/// Callback called when player ends a external playback.
- (void)onExternalPlaybackEnd:(OTTDevice * _Nonnull)device;
/// Callback called when plugin is connecting to receiver.
- (void)onReadyToSendMetadata:(NSString * _Nonnull)deviceId status:(NSString * _Nonnull)status;
- (void)onUrlDidSet:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback triggered when an ad playing on a separate view starts
- (void)onExternalAdStarted:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback triggered when an ad playing on a separate view ends
- (void)onExternalAdEnded:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback triggered on volume changes
- (void)onVolumeChanged:(AmpPlayer * _Nonnull)ampPlayer volumeLevel:(float)volumeLevel;
@end


@interface AmpButton (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end


SWIFT_CLASS("_TtC7AmpCore14AmpCloseButton")
@interface AmpCloseButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore19AmpCurrentTimeLabel")
@interface AmpCurrentTimeLabel : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpCurrentTimeLabel (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onSeekEnd:(NSTimeInterval)time;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC7AmpCore15AmpCustomSlider")
@interface AmpCustomSlider : UIControl
@property (nonatomic) CGRect bounds;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpCustomSlider (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAdBreakStartedWithBreak:(AdBreakInfo * _Nullable)break_;
@end


SWIFT_CLASS("_TtC7AmpCore16AmpDurationLabel")
@interface AmpDurationLabel : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTouch:(id _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpDurationLabel (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end


SWIFT_CLASS("_TtC7AmpCore16AmpForwardButton")
@interface AmpForwardButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore19AmpFullScreenButton")
@interface AmpFullScreenButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onEnterFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onExitFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore13AmpMuteButton")
@interface AmpMuteButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onMuteStateChangeWithIsMuted:(BOOL)isMuted;
- (void)onVolumeChanged:(AmpPlayer * _Nonnull)ampPlayer volumeLevel:(float)volumeLevel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore12AmpPiPButton")
@interface AmpPiPButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore17AmpPlayBackButton")
@interface AmpPlayBackButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
/// Player Event Observer Protocol
- (void)onPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onHandledDidBecomeActive:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onExternalPlaybackChange:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class AmpUIView;
@class PlayerUIView;

/// Class in charge of augmenting the AVPlayer related functionality.
SWIFT_CLASS("_TtC7AmpCore9AmpPlayer")
@interface AmpPlayer : NSObject
/// Initializes a new AmpPlayer with the parameters provided.
///
/// returns:
/// A configured instance of an AmpPlayer.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView inlineUIView:(AmpUIView * _Nonnull)inlineUIView fullScreenUIView:(AmpUIView * _Nullable)fullScreenUIView;
- (nonnull instancetype)initWithPlayerUI:(PlayerUIView * _Nonnull)playerUI;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView PlayerUI:(PlayerUIView * _Nonnull)playerUI;
@end

/// The type of Media Characteristic defined in a enum
/// <ul>
///   <li>
///     CloseCaptions: The Characteristic for Close Captions.
///   </li>
///   <li>
///     Audio: The Characteristic for Audio Tracks.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, MediaCharacteristic, open) {
/// CloseCaptions: The Characteristic for Close Captions.
  MediaCharacteristicCloseCaptions = 0,
/// Audio: The Characteristic for Audio Tracks.
  MediaCharacteristicAudio = 1,
};

@class AVPlayer;
@class AVPlayerItem;
@class Media;
enum StreamType : NSInteger;
enum PlaybackState : NSInteger;
enum BufferingState : NSInteger;
@class AmpPlayerView;
@class UIViewController;
@protocol AVPictureInPictureControllerDelegate;
@class AVPictureInPictureController;
@class AVURLAsset;
@class FairplayConfiguration;

@interface AmpPlayer (SWIFT_EXTENSION(AmpCore))
/// AVFoundation native player.
@property (nonatomic, readonly, strong) AVPlayer * _Nullable player;
/// Flag to allow the player controls during an ad
@property (nonatomic) BOOL enableAdUI;
/// The stream’s information
@property (nonatomic, strong) StreamInfo * _Nullable streamInfo;
/// The player’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// The project’s domain
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull domain;)
+ (NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// License used
@property (nonatomic, copy) NSString * _Nullable licenseString;
/// The native player item.
@property (nonatomic, readonly, strong) AVPlayerItem * _Nullable playerItem;
/// Title used on default UI
@property (nonatomic, copy) NSString * _Nullable title;
/// Subtitle used on default UI
@property (nonatomic, copy) NSString * _Nullable subtitle;
/// The current URL
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// Variable used to manage the media object
@property (nonatomic, strong) Media * _Nullable media;
/// Enables or disables autoplay
@property (nonatomic) BOOL autoplay;
/// Check if DVR is enabled
@property (nonatomic) BOOL isDVREnabled;
/// The type of the stream loaded
@property (nonatomic) enum StreamType streamType;
/// The current state of the video playback
@property (nonatomic) enum PlaybackState playbackState;
/// Metadata at the current time frame (ID3Tags)
@property (nonatomic, copy) NSArray<AVMetadataItem *> * _Nonnull timedMetadata;
/// The current buferring state
@property (nonatomic) enum BufferingState bufferingState;
/// Player View
@property (nonatomic, strong) AmpPlayerView * _Nullable playerView;
/// Customized view for an inline player instance
@property (nonatomic, strong) AmpUIView * _Nullable inlineCustomView;
/// Customized view for a fullscren player instance
@property (nonatomic, strong) AmpUIView * _Nullable fullCustomScreenView;
/// Return AMP Parent View Controller
@property (nonatomic, readonly, strong) UIViewController * _Nullable parentViewController;
/// Return true or false if AMP is on fullscreen mode
@property (nonatomic) BOOL isFullscreen;
/// Return true or false if the player supports Picture in Picture
@property (nonatomic) BOOL isBackgroundSnapshotEnabled;
/// Return true or false if the player supports Picture in Picture
@property (nonatomic) BOOL isPictureInPictureEnabled;
/// Picture in Picture Delegate
@property (nonatomic, readonly, strong) id <AVPictureInPictureControllerDelegate> _Nullable pictureDelegate;
/// Picture in Picture Controller
@property (nonatomic, readonly, strong) AVPictureInPictureController * _Nullable pictureController;
/// Notification on player will resign active
- (void)handleWillResignActive;
/// Notification on player did become active
- (void)handleDidBecomeActive;
/// Setter for the player license
/// important:
///
/// If the license is invalid you won’t be able to make use of the AMPPlayer or it’s components
/// \param license 
/// Contains the license as an string
///
- (void)setLicense:(NSString * _Nonnull)license;
/// Notification on player handle AVPlayer Access.
/// \param notification The NSNotification.
///
- (void)handleAVPlayerAccess:(NSNotification * _Nonnull)notification;
/// Function to set the player URL, you can use it to change the current video stream.
/// \param url String with the URL.
///
- (void)playWithUrl:(NSString * _Nonnull)streamUrl;
- (void)playWithAsset:(AVURLAsset * _Nonnull)asset;
/// Function to set the player URL Using Fairplay DRM, you can use it to change the current video stream.
/// \param url String with the URL.
///
/// \param certificateUrl String with the URL.
///
/// \param serverURL String with the URL.
///
/// \param jsonResponse Boolean Specifies whether the response of the verification server is json or not.
///
- (void)playWithUrl:(NSString * _Nonnull)url certificateUrl:(NSString * _Nonnull)certificateUrl serverURL:(NSString * _Nonnull)serverURL customHeaders:(NSDictionary<NSString *, NSString *> * _Nullable)customHeaders jsonResponse:(BOOL)jsonResponse SWIFT_DEPRECATED_MSG("Use play(url:configuration)");
- (void)playWithUrl:(NSString * _Nonnull)url configuration:(FairplayConfiguration * _Nonnull)configuration;
/// Function to manage the information’s change on the play back
/// \param notification The NSNotification
///
- (void)playerInfoChanged:(NSNotification * _Nonnull)notification;
/// Function to manage when the player finished to play an asset
/// \param notification The NSNotification
///
- (void)playerItemDidPlayToEndTime:(NSNotification * _Nonnull)notification;
/// Function to manage when the player stalled while playing an asset
/// \param notification The NSNotification
///
- (void)playerDidStall:(NSNotification * _Nonnull)notification;
/// Function to check if the playback matches the end of the video
- (BOOL)isPlaybackComplete SWIFT_WARN_UNUSED_RESULT;
/// Function to manage when the player finished to play an asset
/// \param notification The NSNotification
///
- (void)playerItemFailedToPlayToEndTime:(NSNotification * _Nonnull)notification;
- (void)newErrorLogEntry:(NSNotification * _Nonnull)notification;
/// Function to manage the position when an asset is playing
- (void)updatePosition;
/// Function to force an update on the playback timebar
- (void)changePosition;
/// Registers an observer to be notified of player events.
/// \param observer The observer to be registered.
///
///
/// returns:
/// The id of the registered observer.
- (NSInteger)registerObserver:(id <PlayerEventObserver> _Nonnull)observer SWIFT_WARN_UNUSED_RESULT;
/// Removes a registered observer.
/// \param id The id of the observer to be removed.
///
- (void)removeObserver:(NSInteger)id;
@end


/// Player View Class
SWIFT_CLASS("_TtC7AmpCore13AmpPlayerView")
@interface AmpPlayerView : UIView
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore15AmpRewindButton")
@interface AmpRewindButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore17AmpSettingsButton")
@interface AmpSettingsButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore9AmpSlider")
@interface AmpSlider : UISlider
/// Set the maximum track tint.
@property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpSlider (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end

typedef SWIFT_ENUM(NSInteger, AmpUIAction, open) {
  AmpUIActionClose = 0,
  AmpUIActionShare = 1,
  AmpUIActionPlay = 2,
  AmpUIActionPause = 3,
  AmpUIActionCaptions = 4,
  AmpUIActionForward = 5,
  AmpUIActionRewind = 6,
  AmpUIActionPictureinpicture = 7,
  AmpUIActionMute = 8,
  AmpUIActionUnmute = 9,
  AmpUIActionAirplay = 10,
  AmpUIActionFullscreen = 11,
};


SWIFT_PROTOCOL("_TtP7AmpCore18AmpUIEventDelegate_")
@protocol AmpUIEventDelegate
- (void)onActionPerformedWithAction:(enum AmpUIAction)action player:(AmpPlayer * _Nullable)player;
@end


SWIFT_CLASS("_TtC7AmpCore12PlayerUIView")
@interface PlayerUIView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)hide;
@end


SWIFT_CLASS("_TtC7AmpCore9AmpUIView")
@interface AmpUIView : PlayerUIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIImage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC7AmpCore7BasicUI")
@interface BasicUI : AmpUIView
@property (nonatomic, strong) IBInspectable UIImage * _Nullable closeButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenCloseButton;
@property (nonatomic) IBInspectable BOOL isHiddenAirplayButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable rewindButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenRewindButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable forwardButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenForwardButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable playButtonImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pauseButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenPlayButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pictureInPictureButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenPictureInPictureButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable muteButtonImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable unMuteButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenMuteButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable settingsButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenSettingsButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable fullscreenButtonImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable fullscreenButtonCollapseImage;
@property (nonatomic) IBInspectable BOOL isHiddenFullscreenButton;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull titleText;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull subTitleText;
@property (nonatomic) IBInspectable BOOL isTitle;
@property (nonatomic) IBInspectable BOOL isSubtitle;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull bufferColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull maximumTrackTintColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull progressTintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end

/// BufferingState contains all the possible states for the player buffering.
/// <ul>
///   <li>
///     Unknown: Not started, or there has been an error.
///   </li>
///   <li>
///     Ready: The player is now ready to be played.
///   </li>
///   <li>
///     Delayed: The player is still loading.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, BufferingState, open) {
/// Unknown: Not started, or there has been an error.
  BufferingStateUnknown = 0,
/// Ready: The player is now ready to be played.
  BufferingStateReady = 1,
/// Delayed: The player is still loading.
  BufferingStateDelayed = 2,
};


SWIFT_CLASS("_TtC7AmpCore7Caption")
@interface Caption : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class in charge of managing cuepoints per AmpPlayer.
SWIFT_CLASS("_TtC7AmpCore15CuepointManager")
@interface CuepointManager : NSObject <PlayerEventObserver>
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AmpCore21FairplayConfiguration")
@interface FairplayConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FairplayProvider, open) {
/// Stopped: The state is stop
  FairplayProviderCustom = 0,
/// Playing: The state is play
  FairplayProviderVerimatrix = 1,
/// Paused: The state is paused
  FairplayProviderAzure = 2,
/// Failed: The state is failed
  FairplayProviderExpressplay = 3,
};



SWIFT_CLASS("_TtC7AmpCore5Media")
@interface Media : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC7AmpCore9OTTDevice")
@interface OTTDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum with the playback state
/// <ul>
///   <li>
///     Stopped: The state is stop
///   </li>
///   <li>
///     Playing: The state is play
///   </li>
///   <li>
///     Paused: The state is paused
///   </li>
///   <li>
///     Failed: The state is failed
///   </li>
///   <li>
///     Ended: The state is ended
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PlaybackState, open) {
/// Stopped: The state is stop
  PlaybackStateStopped = 0,
/// Playing: The state is play
  PlaybackStatePlaying = 1,
/// Paused: The state is paused
  PlaybackStatePaused = 2,
/// Failed: The state is failed
  PlaybackStateFailed = 3,
/// Ended: The state is ended
  PlaybackStateEnded = 4,
};

/// Enum to manage the errors on the player.
/// <ul>
///   <li>
///     UnknownAssetFormat: For assets with a incorrect format.
///   </li>
///   <li>
///     DownloadFailed: When the asset can’t download.
///   </li>
///   <li>
///     UnknownError: For unknown errors.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PlayerError, open) {
/// UnknownAssetFormat: For assets with a incorrect format.
  PlayerErrorUnknownAssetFormat = 0,
/// DownloadFailed: When the asset can’t download.
  PlayerErrorDownloadFailed = 1,
/// UnknownError: For unknown errors.
  PlayerErrorUnknownError = 2,
/// PlayerItemFailedToPlayToEnd: Asset failed to finish playback
  PlayerErrorPlayerItemFailedToPlayToEnd = 3,
/// PlayerItemErrorLog: New AVPlayerItemErrorLog
  PlayerErrorPlayerItemErrorLog = 4,
/// InvalidLicense: Invalid or Expired License
  PlayerErrorInvalidLicense = 5,
/// No Network Connection
  PlayerErrorNetworkConnectionError = 6,
/// Invalid CKC
  PlayerErrorDrmCKCFailed = 7,
/// Invalid Certificate
  PlayerErrorDrmInvalidCertificate = 8,
/// Invalid Asset Id
  PlayerErrorDrmInvalidAssetId = 9,
/// Invalid CKC from KSM
  PlayerErrorDrmNotValidCKCFromKSM = 10,
/// No data from loading request
  PlayerErrorDrmNoData = 11,
/// No data from loading request
  PlayerErrorDvrNoDuration = 12,
};
static NSString * _Nonnull const PlayerErrorDomain = @"AmpCore.PlayerError";


/// :nodoc:
SWIFT_CLASS("_TtC7AmpCore17PlayerEventLogger")
@interface PlayerEventLogger : NSObject <PlayerEventObserver>
/// :nodoc:
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onHandledResignActive:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onHandledDidBecomeActive:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)willHandleUrl:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onCuepointReached:(AmpPlayer * _Nonnull)ampPlayer atTime:(double)atTime;
/// :nodoc:
- (void)onPlaybackStalled:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



IB_DESIGNABLE
SWIFT_CLASS("_TtC7AmpCore8PlayerUI")
@interface PlayerUI : PlayerUIView
@property (nonatomic) IBInspectable BOOL airplayIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable rewindImage;
@property (nonatomic) IBInspectable BOOL rewindIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable forwardImage;
@property (nonatomic) IBInspectable BOOL forwardIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable playImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pauseImage;
@property (nonatomic) IBInspectable BOOL playIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pipImage;
@property (nonatomic) IBInspectable BOOL pipIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable muteImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable unMuteImage;
@property (nonatomic) IBInspectable BOOL muteIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable settingsImage;
@property (nonatomic) IBInspectable BOOL settingsIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable fullscreenImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable collapseImage;
@property (nonatomic) IBInspectable BOOL fullscreenIsHidden;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull titleText;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull subTitleText;
@property (nonatomic) IBInspectable BOOL isTitleHidden;
@property (nonatomic) IBInspectable BOOL isSubtitleHidden;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull bufferColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull maximumTrackTintColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull progressTintColor;
@property (nonatomic) IBInspectable CGFloat progressBarInset;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end



@interface PlayerUIView (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onTap:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onSeekBegan;
- (void)onSeekEnd:(NSTimeInterval)time;
@end


SWIFT_CLASS("_TtC7AmpCore11PosterImage")
@interface PosterImage : NSObject
@property (nonatomic, strong) UIImage * _Nullable image;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PosterImageType, open) {
  PosterImageTypePoster = 0,
  PosterImageTypeStreamAutoRecovery = 1,
};


SWIFT_CLASS("_TtC7AmpCore20SelectorWithInterval")
@interface SelectorWithInterval : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS("_TtC7AmpCore22SettingsViewController")
@interface SettingsViewController : UIViewController
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class UITableViewCell;

@interface SettingsViewController (SWIFT_EXTENSION(AmpCore)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// :nodoc:
SWIFT_PROTOCOL("_TtP7AmpCore13StreamHandler_")
@protocol StreamHandler
/// :nodoc:
- (BOOL)canHandleUrlWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@optional
/// :nodoc:
- (void)handleUrlWithUrl:(NSString * _Nonnull)url player:(AmpPlayer * _Nonnull)player success:(void (^ _Nonnull)(AVPlayerItem * _Nullable))success failure:(void (^ _Nonnull)(enum PlayerError))failure;
/// :nodoc:
- (void)handleAVURLAssetWithAsset:(AVURLAsset * _Nonnull)asset player:(AmpPlayer * _Nonnull)player success:(void (^ _Nonnull)(AVPlayerItem * _Nullable))success failure:(void (^ _Nonnull)(enum PlayerError))failure;
@required
/// :nodoc:
- (enum StreamType)getStreamType SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains all the information related to the stream being played.
SWIFT_CLASS("_TtC7AmpCore10StreamInfo")
@interface StreamInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Stream type.
/// <ul>
///   <li>
///     HTTP: when the stream is a HLS stream.
///   </li>
///   <li>
///     Unknown: unknown stream.
///   </li>
///   <li>
///     Octoshape: when the stream is a Octoshape stream.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, StreamType, open) {
/// HTTP: when the stream is a HLS stream.
  StreamTypeHttp = 0,
/// Unknown: unknown stream.
  StreamTypeUnknown = 1,
/// Octoshape: when the stream is a Octoshape stream.
  StreamTypeOctoshape = 2,
/// Config: when the stream is retrieved via a Config file.
  StreamTypeConfig = 3,
/// Config: when the stream is retrieved via a Config file.
  StreamTypeLocal = 4,
/// DRM: when the stream is Fairplay DRM protected.
  StreamTypeDrm = 5,
/// Audio: when the stream is audio only.
  StreamTypeAudio = 6,
};












#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef AMPCORE_SWIFT_H
#define AMPCORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmpCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



SWIFT_CLASS("_TtC7AmpCore11AdBreakInfo")
@interface AdBreakInfo : NSObject
- (nonnull instancetype)initWithTotalAds:(NSInteger)totalAds duration:(double)duration breakIndex:(NSInteger)breakIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AmpCore6AdInfo")
@interface AdInfo : NSObject
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title adDescription:(NSString * _Nonnull)adDescription position:(NSInteger)position duration:(double)duration vendor:(NSString * _Nonnull)vendor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AmpCore8AdVendor")
@interface AdVendor : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull FREEWHEEL;)
+ (NSString * _Nonnull)FREEWHEEL SWIFT_WARN_UNUSED_RESULT;
+ (void)setFREEWHEEL:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull GOOGLE;)
+ (NSString * _Nonnull)GOOGLE SWIFT_WARN_UNUSED_RESULT;
+ (void)setGOOGLE:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull YOSPACE;)
+ (NSString * _Nonnull)YOSPACE SWIFT_WARN_UNUSED_RESULT;
+ (void)setYOSPACE:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC7AmpCore9AmpButton")
@interface AmpButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTouch:(id _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIColor;

SWIFT_CLASS("_TtC7AmpCore17AmpAirplay2Button")
@interface AmpAirplay2Button : AmpButton
@property (nonatomic, strong) UIColor * _Nullable tintColor;
- (void)handleTouch:(id _Nonnull)sender;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore16AmpAirplayButton")
@interface AmpAirplayButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class AmpPlayer;
enum PlayerError : NSInteger;
@class StreamInfo;
@class AVMetadataItem;
@class AVAssetTrack;
@class OTTDevice;

/// Protocol used to receive player events.
SWIFT_PROTOCOL("_TtP7AmpCore19PlayerEventObserver_")
@protocol PlayerEventObserver
@optional
/// Callback called when the player is going to handle the url.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)willHandleUrl:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when an external entity is handling the initial connection to the stream, like with SSAI.
- (void)willRequestStream;
/// Callback called when the internal player is created successfully.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onAVPlayerCreation:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the external playback delegate has changed.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onExternalPlaybackChange:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player experiences an error.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param error The error sent.
///
- (void)onAmpError:(AmpPlayer * _Nonnull)ampPlayer error:(enum PlayerError)error code:(NSInteger)code message:(NSString * _Nonnull)message;
/// Callback called when the playback state of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpPlaybackStateChanged' has been renamed to 'onPlaybackStateChanged:'");
/// Callback called when the buffering state of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpBufferingStateChanged' has been renamed to 'onBufferingStateChanged:'");
/// Callback called when the bitrate of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onBitrateChanged:(AmpPlayer * _Nonnull)ampPlayer bitrate:(double)bitrate;
/// Callback called when the audio bitrate of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onAudioTrackChanged:(AmpPlayer * _Nonnull)ampPlayer name:(NSString * _Nonnull)name;
/// Callback called when the position of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpPositionChange:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpPositionChange' has been renamed to 'onPositionChange:'");
/// Callback called when the seconds of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onTimeChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpTimeChange:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpTimeChange' has been renamed to 'onTimeChange:'");
/// Callback called when the position of the player changes.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param atTime The time of the cuepoint reached.
///
- (void)onCuepointReached:(AmpPlayer * _Nonnull)ampPlayer atTime:(double)atTime;
- (void)onAmpCuepointReached:(AmpPlayer * _Nonnull)ampPlayer atTime:(double)atTime SWIFT_UNAVAILABLE_MSG("'onAmpCuepointReached' has been renamed to 'onCuepointReached(_:)'");
/// Callback called when the playback of the player ends.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpPlaybackEnded' has been renamed to 'onPlaybackEnded:'");
/// Callback called when the player is going to be replayed.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onReplay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAmpReplay:(AmpPlayer * _Nonnull)ampPlayer SWIFT_UNAVAILABLE_MSG("'onAmpReplay' has been renamed to 'onReplay:'");
/// Callback triggered when the player handled the AVPlayerItemPlaybackStalled notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackStalled:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player handled the UIApplicationWillResignActiveNotification notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onHandledResignActive:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player handled the UIApplicationDidBecomeActiveNotification notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onHandledDidBecomeActive:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player handled the AVPlayerItemNewAccessLogEntry notification.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onHandleAVPlayerAccess:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the streams information changes.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param streamInfo The struct representing the Stream’s Information.
///
- (void)onStreamInformationChanged:(AmpPlayer * _Nonnull)ampPlayer streamInfo:(StreamInfo * _Nonnull)streamInfo;
/// Callback called when the player is going to be stopped.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player logs are enabled.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onEnableLogs:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player logs are disabled.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onDisableLogs:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when a time metadata (ID3Tag) is reached.
/// \param ampPlayer The instance of the player that sends the event.
///
/// \param metadata The array of metadata reached
///
- (void)onTimedMetadata:(AmpPlayer * _Nonnull)ampPlayer metadata:(NSArray<AVMetadataItem *> * _Nonnull)metadata;
/// Callback called when seek begin
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onSeekBegan;
/// Callback called when seek end
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onSeekEnd:(NSTimeInterval)time;
/// Callback called when seek is triggered
/// \param time The timeInterval
///
- (void)onSeek:(double)currentTime :(NSTimeInterval)time;
/// Callback called when player jumps to live
- (void)onGoLive;
/// Callback called on stream forward/backword
- (void)onJumpToTime;
/// Callback called when the player is about to cancel current playback.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)willCancelPlayback:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the stream is ready to play.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the playback information changed.
/// \param ampPlayer The instance of the player that sends the event.
///
- (void)onPlaybackInformationChanged:(NSArray<AVAssetTrack *> * _Nonnull)tracks player:(AmpPlayer * _Nonnull)player;
/// Callback called when the player view is tapped.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onTap:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the top bar or bottom bar is visible.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onBarShown:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the top bar or bottom bar is visible.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onHiddenBar:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player view is double tapped.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onDoubleTap:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player enters fullscreen.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onEnterFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player exits fullscreen.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onExitFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player exits fullscreen.
/// \param ampPlayerManager The instance of the player that sends the event.
///
- (void)onToggleClosedCaption:(BOOL)isCaptionOn lang:(NSString * _Nullable)lang;
/// Callback called when the player is going to enter fullscreen, before animation starts.
/// \param ampPlayerManager The instance of the player that sends the event.
///
/// \param newFrame The new frame that the player is going to reach.
///
- (void)willEnterFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player is going to exit fullscreen, before animation starts.
/// \param ampPlayerManager The instance of the player that sends the event.
///
/// \param newFrame The new frame that the player is going to reach.
///
- (void)willExitFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback called when the player rotates.
/// \param ampPlayerManager The instance of the player that sends the event.
///
/// \param orientation The current orientation.
///
- (void)onRotate:(AmpPlayer * _Nonnull)ampPlayer;
/// ///// –– Ads Callbacks ———–/////////
/// Callback called when DAI IMA ad started.
- (void)onAdPeriodStarted;
/// Callback called when DAI IMA ad ended.
- (void)onAdPeriodEnded;
/// Callback called when ad pod break is started.
- (void)onAdErrorWithError:(NSObject * _Nonnull)error;
/// Callback called when ad pod break is started.
- (void)onAdBreakStartedWithBreak:(AdBreakInfo * _Nullable)break_;
/// Callback called when an ad pod break is ended.
- (void)onAdBreakEndedWithBreak:(AdBreakInfo * _Nullable)break_;
/// Callback called when an ad is requested in a ad pod.
- (void)onAdRequested;
/// Callback called when an ad is requested in a ad pod.
- (void)onAdRequestCompleted;
/// Callback called when each Ad is started in an ad pod.
- (void)onAdStartedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when each Ad is ended in an ad pod.
- (void)onAdEndedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when each Ad is resumed in an ad pod.
- (void)onAdResumedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when each Ad is paused in an ad pod.
- (void)onAdPausedWithAd:(AdInfo * _Nullable)ad;
/// Callback called when an Ad is skipped.
- (void)onAdSkipped;
/// Callback called when Ad time changed.
- (void)onAdProceedWithTime:(double)time;
/// Callback called when player change the mute property.
- (void)onMuteStateChangeWithIsMuted:(BOOL)isMuted;
/// Callback called when player starts a external playback
- (void)onExternalPlaybackStart:(OTTDevice * _Nonnull)device;
/// Callback called when player ends a external playback.
- (void)onExternalPlaybackEnd:(OTTDevice * _Nonnull)device;
/// Callback called when plugin is connecting to receiver.
- (void)onReadyToSendMetadata:(NSString * _Nonnull)deviceId status:(NSString * _Nonnull)status;
- (void)onUrlDidSet:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback triggered when an ad playing on a separate view starts
- (void)onExternalAdStarted:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback triggered when an ad playing on a separate view ends
- (void)onExternalAdEnded:(AmpPlayer * _Nonnull)ampPlayer;
/// Callback triggered on volume changes
- (void)onVolumeChanged:(AmpPlayer * _Nonnull)ampPlayer volumeLevel:(float)volumeLevel;
@end


@interface AmpButton (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end


SWIFT_CLASS("_TtC7AmpCore14AmpCloseButton")
@interface AmpCloseButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore19AmpCurrentTimeLabel")
@interface AmpCurrentTimeLabel : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpCurrentTimeLabel (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onSeekEnd:(NSTimeInterval)time;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC7AmpCore15AmpCustomSlider")
@interface AmpCustomSlider : UIControl
@property (nonatomic) CGRect bounds;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)drawRect:(CGRect)rect;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpCustomSlider (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onAdBreakStartedWithBreak:(AdBreakInfo * _Nullable)break_;
@end


SWIFT_CLASS("_TtC7AmpCore16AmpDurationLabel")
@interface AmpDurationLabel : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleTouch:(id _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpDurationLabel (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end


SWIFT_CLASS("_TtC7AmpCore16AmpForwardButton")
@interface AmpForwardButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore19AmpFullScreenButton")
@interface AmpFullScreenButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onEnterFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onExitFullscreen:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore13AmpMuteButton")
@interface AmpMuteButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onMuteStateChangeWithIsMuted:(BOOL)isMuted;
- (void)onVolumeChanged:(AmpPlayer * _Nonnull)ampPlayer volumeLevel:(float)volumeLevel;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore12AmpPiPButton")
@interface AmpPiPButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore17AmpPlayBackButton")
@interface AmpPlayBackButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
/// Player Event Observer Protocol
- (void)onPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onHandledDidBecomeActive:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onExternalPlaybackChange:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class AmpUIView;
@class PlayerUIView;

/// Class in charge of augmenting the AVPlayer related functionality.
SWIFT_CLASS("_TtC7AmpCore9AmpPlayer")
@interface AmpPlayer : NSObject
/// Initializes a new AmpPlayer with the parameters provided.
///
/// returns:
/// A configured instance of an AmpPlayer.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView inlineUIView:(AmpUIView * _Nonnull)inlineUIView fullScreenUIView:(AmpUIView * _Nullable)fullScreenUIView;
- (nonnull instancetype)initWithPlayerUI:(PlayerUIView * _Nonnull)playerUI;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView PlayerUI:(PlayerUIView * _Nonnull)playerUI;
@end

/// The type of Media Characteristic defined in a enum
/// <ul>
///   <li>
///     CloseCaptions: The Characteristic for Close Captions.
///   </li>
///   <li>
///     Audio: The Characteristic for Audio Tracks.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, MediaCharacteristic, open) {
/// CloseCaptions: The Characteristic for Close Captions.
  MediaCharacteristicCloseCaptions = 0,
/// Audio: The Characteristic for Audio Tracks.
  MediaCharacteristicAudio = 1,
};

@class AVPlayer;
@class AVPlayerItem;
@class Media;
enum StreamType : NSInteger;
enum PlaybackState : NSInteger;
enum BufferingState : NSInteger;
@class AmpPlayerView;
@class UIViewController;
@protocol AVPictureInPictureControllerDelegate;
@class AVPictureInPictureController;
@class AVURLAsset;
@class FairplayConfiguration;

@interface AmpPlayer (SWIFT_EXTENSION(AmpCore))
/// AVFoundation native player.
@property (nonatomic, readonly, strong) AVPlayer * _Nullable player;
/// Flag to allow the player controls during an ad
@property (nonatomic) BOOL enableAdUI;
/// The stream’s information
@property (nonatomic, strong) StreamInfo * _Nullable streamInfo;
/// The player’s version
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// The project’s domain
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull domain;)
+ (NSString * _Nonnull)domain SWIFT_WARN_UNUSED_RESULT;
/// License used
@property (nonatomic, copy) NSString * _Nullable licenseString;
/// The native player item.
@property (nonatomic, readonly, strong) AVPlayerItem * _Nullable playerItem;
/// Title used on default UI
@property (nonatomic, copy) NSString * _Nullable title;
/// Subtitle used on default UI
@property (nonatomic, copy) NSString * _Nullable subtitle;
/// The current URL
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// Variable used to manage the media object
@property (nonatomic, strong) Media * _Nullable media;
/// Enables or disables autoplay
@property (nonatomic) BOOL autoplay;
/// Check if DVR is enabled
@property (nonatomic) BOOL isDVREnabled;
/// The type of the stream loaded
@property (nonatomic) enum StreamType streamType;
/// The current state of the video playback
@property (nonatomic) enum PlaybackState playbackState;
/// Metadata at the current time frame (ID3Tags)
@property (nonatomic, copy) NSArray<AVMetadataItem *> * _Nonnull timedMetadata;
/// The current buferring state
@property (nonatomic) enum BufferingState bufferingState;
/// Player View
@property (nonatomic, strong) AmpPlayerView * _Nullable playerView;
/// Customized view for an inline player instance
@property (nonatomic, strong) AmpUIView * _Nullable inlineCustomView;
/// Customized view for a fullscren player instance
@property (nonatomic, strong) AmpUIView * _Nullable fullCustomScreenView;
/// Return AMP Parent View Controller
@property (nonatomic, readonly, strong) UIViewController * _Nullable parentViewController;
/// Return true or false if AMP is on fullscreen mode
@property (nonatomic) BOOL isFullscreen;
/// Return true or false if the player supports Picture in Picture
@property (nonatomic) BOOL isBackgroundSnapshotEnabled;
/// Return true or false if the player supports Picture in Picture
@property (nonatomic) BOOL isPictureInPictureEnabled;
/// Picture in Picture Delegate
@property (nonatomic, readonly, strong) id <AVPictureInPictureControllerDelegate> _Nullable pictureDelegate;
/// Picture in Picture Controller
@property (nonatomic, readonly, strong) AVPictureInPictureController * _Nullable pictureController;
/// Notification on player will resign active
- (void)handleWillResignActive;
/// Notification on player did become active
- (void)handleDidBecomeActive;
/// Setter for the player license
/// important:
///
/// If the license is invalid you won’t be able to make use of the AMPPlayer or it’s components
/// \param license 
/// Contains the license as an string
///
- (void)setLicense:(NSString * _Nonnull)license;
/// Notification on player handle AVPlayer Access.
/// \param notification The NSNotification.
///
- (void)handleAVPlayerAccess:(NSNotification * _Nonnull)notification;
/// Function to set the player URL, you can use it to change the current video stream.
/// \param url String with the URL.
///
- (void)playWithUrl:(NSString * _Nonnull)streamUrl;
- (void)playWithAsset:(AVURLAsset * _Nonnull)asset;
/// Function to set the player URL Using Fairplay DRM, you can use it to change the current video stream.
/// \param url String with the URL.
///
/// \param certificateUrl String with the URL.
///
/// \param serverURL String with the URL.
///
/// \param jsonResponse Boolean Specifies whether the response of the verification server is json or not.
///
- (void)playWithUrl:(NSString * _Nonnull)url certificateUrl:(NSString * _Nonnull)certificateUrl serverURL:(NSString * _Nonnull)serverURL customHeaders:(NSDictionary<NSString *, NSString *> * _Nullable)customHeaders jsonResponse:(BOOL)jsonResponse SWIFT_DEPRECATED_MSG("Use play(url:configuration)");
- (void)playWithUrl:(NSString * _Nonnull)url configuration:(FairplayConfiguration * _Nonnull)configuration;
/// Function to manage the information’s change on the play back
/// \param notification The NSNotification
///
- (void)playerInfoChanged:(NSNotification * _Nonnull)notification;
/// Function to manage when the player finished to play an asset
/// \param notification The NSNotification
///
- (void)playerItemDidPlayToEndTime:(NSNotification * _Nonnull)notification;
/// Function to manage when the player stalled while playing an asset
/// \param notification The NSNotification
///
- (void)playerDidStall:(NSNotification * _Nonnull)notification;
/// Function to check if the playback matches the end of the video
- (BOOL)isPlaybackComplete SWIFT_WARN_UNUSED_RESULT;
/// Function to manage when the player finished to play an asset
/// \param notification The NSNotification
///
- (void)playerItemFailedToPlayToEndTime:(NSNotification * _Nonnull)notification;
- (void)newErrorLogEntry:(NSNotification * _Nonnull)notification;
/// Function to manage the position when an asset is playing
- (void)updatePosition;
/// Function to force an update on the playback timebar
- (void)changePosition;
/// Registers an observer to be notified of player events.
/// \param observer The observer to be registered.
///
///
/// returns:
/// The id of the registered observer.
- (NSInteger)registerObserver:(id <PlayerEventObserver> _Nonnull)observer SWIFT_WARN_UNUSED_RESULT;
/// Removes a registered observer.
/// \param id The id of the observer to be removed.
///
- (void)removeObserver:(NSInteger)id;
@end


/// Player View Class
SWIFT_CLASS("_TtC7AmpCore13AmpPlayerView")
@interface AmpPlayerView : UIView
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore15AmpRewindButton")
@interface AmpRewindButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore17AmpSettingsButton")
@interface AmpSettingsButton : AmpButton
- (void)handleTouch:(id _Nonnull)sender;
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7AmpCore9AmpSlider")
@interface AmpSlider : UISlider
/// Set the maximum track tint.
@property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface AmpSlider (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
- (void)streamReadyToPlay:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
@end

typedef SWIFT_ENUM(NSInteger, AmpUIAction, open) {
  AmpUIActionClose = 0,
  AmpUIActionShare = 1,
  AmpUIActionPlay = 2,
  AmpUIActionPause = 3,
  AmpUIActionCaptions = 4,
  AmpUIActionForward = 5,
  AmpUIActionRewind = 6,
  AmpUIActionPictureinpicture = 7,
  AmpUIActionMute = 8,
  AmpUIActionUnmute = 9,
  AmpUIActionAirplay = 10,
  AmpUIActionFullscreen = 11,
};


SWIFT_PROTOCOL("_TtP7AmpCore18AmpUIEventDelegate_")
@protocol AmpUIEventDelegate
- (void)onActionPerformedWithAction:(enum AmpUIAction)action player:(AmpPlayer * _Nullable)player;
@end


SWIFT_CLASS("_TtC7AmpCore12PlayerUIView")
@interface PlayerUIView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)hide;
@end


SWIFT_CLASS("_TtC7AmpCore9AmpUIView")
@interface AmpUIView : PlayerUIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class UIImage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC7AmpCore7BasicUI")
@interface BasicUI : AmpUIView
@property (nonatomic, strong) IBInspectable UIImage * _Nullable closeButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenCloseButton;
@property (nonatomic) IBInspectable BOOL isHiddenAirplayButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable rewindButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenRewindButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable forwardButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenForwardButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable playButtonImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pauseButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenPlayButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pictureInPictureButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenPictureInPictureButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable muteButtonImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable unMuteButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenMuteButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable settingsButtonImage;
@property (nonatomic) IBInspectable BOOL isHiddenSettingsButton;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable fullscreenButtonImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable fullscreenButtonCollapseImage;
@property (nonatomic) IBInspectable BOOL isHiddenFullscreenButton;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull titleText;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull subTitleText;
@property (nonatomic) IBInspectable BOOL isTitle;
@property (nonatomic) IBInspectable BOOL isSubtitle;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull bufferColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull maximumTrackTintColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull progressTintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end

/// BufferingState contains all the possible states for the player buffering.
/// <ul>
///   <li>
///     Unknown: Not started, or there has been an error.
///   </li>
///   <li>
///     Ready: The player is now ready to be played.
///   </li>
///   <li>
///     Delayed: The player is still loading.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, BufferingState, open) {
/// Unknown: Not started, or there has been an error.
  BufferingStateUnknown = 0,
/// Ready: The player is now ready to be played.
  BufferingStateReady = 1,
/// Delayed: The player is still loading.
  BufferingStateDelayed = 2,
};


SWIFT_CLASS("_TtC7AmpCore7Caption")
@interface Caption : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class in charge of managing cuepoints per AmpPlayer.
SWIFT_CLASS("_TtC7AmpCore15CuepointManager")
@interface CuepointManager : NSObject <PlayerEventObserver>
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onPositionChange:(AmpPlayer * _Nonnull)ampPlayer;
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7AmpCore21FairplayConfiguration")
@interface FairplayConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FairplayProvider, open) {
/// Stopped: The state is stop
  FairplayProviderCustom = 0,
/// Playing: The state is play
  FairplayProviderVerimatrix = 1,
/// Paused: The state is paused
  FairplayProviderAzure = 2,
/// Failed: The state is failed
  FairplayProviderExpressplay = 3,
};



SWIFT_CLASS("_TtC7AmpCore5Media")
@interface Media : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC7AmpCore9OTTDevice")
@interface OTTDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum with the playback state
/// <ul>
///   <li>
///     Stopped: The state is stop
///   </li>
///   <li>
///     Playing: The state is play
///   </li>
///   <li>
///     Paused: The state is paused
///   </li>
///   <li>
///     Failed: The state is failed
///   </li>
///   <li>
///     Ended: The state is ended
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PlaybackState, open) {
/// Stopped: The state is stop
  PlaybackStateStopped = 0,
/// Playing: The state is play
  PlaybackStatePlaying = 1,
/// Paused: The state is paused
  PlaybackStatePaused = 2,
/// Failed: The state is failed
  PlaybackStateFailed = 3,
/// Ended: The state is ended
  PlaybackStateEnded = 4,
};

/// Enum to manage the errors on the player.
/// <ul>
///   <li>
///     UnknownAssetFormat: For assets with a incorrect format.
///   </li>
///   <li>
///     DownloadFailed: When the asset can’t download.
///   </li>
///   <li>
///     UnknownError: For unknown errors.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PlayerError, open) {
/// UnknownAssetFormat: For assets with a incorrect format.
  PlayerErrorUnknownAssetFormat = 0,
/// DownloadFailed: When the asset can’t download.
  PlayerErrorDownloadFailed = 1,
/// UnknownError: For unknown errors.
  PlayerErrorUnknownError = 2,
/// PlayerItemFailedToPlayToEnd: Asset failed to finish playback
  PlayerErrorPlayerItemFailedToPlayToEnd = 3,
/// PlayerItemErrorLog: New AVPlayerItemErrorLog
  PlayerErrorPlayerItemErrorLog = 4,
/// InvalidLicense: Invalid or Expired License
  PlayerErrorInvalidLicense = 5,
/// No Network Connection
  PlayerErrorNetworkConnectionError = 6,
/// Invalid CKC
  PlayerErrorDrmCKCFailed = 7,
/// Invalid Certificate
  PlayerErrorDrmInvalidCertificate = 8,
/// Invalid Asset Id
  PlayerErrorDrmInvalidAssetId = 9,
/// Invalid CKC from KSM
  PlayerErrorDrmNotValidCKCFromKSM = 10,
/// No data from loading request
  PlayerErrorDrmNoData = 11,
/// No data from loading request
  PlayerErrorDvrNoDuration = 12,
};
static NSString * _Nonnull const PlayerErrorDomain = @"AmpCore.PlayerError";


/// :nodoc:
SWIFT_CLASS("_TtC7AmpCore17PlayerEventLogger")
@interface PlayerEventLogger : NSObject <PlayerEventObserver>
/// :nodoc:
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onHandledResignActive:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onHandledDidBecomeActive:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)willHandleUrl:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onPlaybackStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onBufferingStateChanged:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onCuepointReached:(AmpPlayer * _Nonnull)ampPlayer atTime:(double)atTime;
/// :nodoc:
- (void)onPlaybackStalled:(AmpPlayer * _Nonnull)ampPlayer;
/// :nodoc:
- (void)onPlaybackEnded:(AmpPlayer * _Nonnull)ampPlayer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



IB_DESIGNABLE
SWIFT_CLASS("_TtC7AmpCore8PlayerUI")
@interface PlayerUI : PlayerUIView
@property (nonatomic) IBInspectable BOOL airplayIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable rewindImage;
@property (nonatomic) IBInspectable BOOL rewindIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable forwardImage;
@property (nonatomic) IBInspectable BOOL forwardIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable playImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pauseImage;
@property (nonatomic) IBInspectable BOOL playIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable pipImage;
@property (nonatomic) IBInspectable BOOL pipIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable muteImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable unMuteImage;
@property (nonatomic) IBInspectable BOOL muteIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable settingsImage;
@property (nonatomic) IBInspectable BOOL settingsIsHidden;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable fullscreenImage;
@property (nonatomic, strong) IBInspectable UIImage * _Nullable collapseImage;
@property (nonatomic) IBInspectable BOOL fullscreenIsHidden;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull titleText;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull subTitleText;
@property (nonatomic) IBInspectable BOOL isTitleHidden;
@property (nonatomic) IBInspectable BOOL isSubtitleHidden;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull bufferColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull maximumTrackTintColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull progressTintColor;
@property (nonatomic) IBInspectable CGFloat progressBarInset;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
@end



@interface PlayerUIView (SWIFT_EXTENSION(AmpCore)) <PlayerEventObserver>
- (void)willStop:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onTap:(AmpPlayer * _Nonnull)ampPlayer;
- (void)onSeekBegan;
- (void)onSeekEnd:(NSTimeInterval)time;
@end


SWIFT_CLASS("_TtC7AmpCore11PosterImage")
@interface PosterImage : NSObject
@property (nonatomic, strong) UIImage * _Nullable image;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PosterImageType, open) {
  PosterImageTypePoster = 0,
  PosterImageTypeStreamAutoRecovery = 1,
};


SWIFT_CLASS("_TtC7AmpCore20SelectorWithInterval")
@interface SelectorWithInterval : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS("_TtC7AmpCore22SettingsViewController")
@interface SettingsViewController : UIViewController
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class UITableViewCell;

@interface SettingsViewController (SWIFT_EXTENSION(AmpCore)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)tableView:(UITableView * _Nonnull)tableView titleForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayHeaderView:(UIView * _Nonnull)view forSection:(NSInteger)section;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// :nodoc:
SWIFT_PROTOCOL("_TtP7AmpCore13StreamHandler_")
@protocol StreamHandler
/// :nodoc:
- (BOOL)canHandleUrlWithUrl:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@optional
/// :nodoc:
- (void)handleUrlWithUrl:(NSString * _Nonnull)url player:(AmpPlayer * _Nonnull)player success:(void (^ _Nonnull)(AVPlayerItem * _Nullable))success failure:(void (^ _Nonnull)(enum PlayerError))failure;
/// :nodoc:
- (void)handleAVURLAssetWithAsset:(AVURLAsset * _Nonnull)asset player:(AmpPlayer * _Nonnull)player success:(void (^ _Nonnull)(AVPlayerItem * _Nullable))success failure:(void (^ _Nonnull)(enum PlayerError))failure;
@required
/// :nodoc:
- (enum StreamType)getStreamType SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains all the information related to the stream being played.
SWIFT_CLASS("_TtC7AmpCore10StreamInfo")
@interface StreamInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Stream type.
/// <ul>
///   <li>
///     HTTP: when the stream is a HLS stream.
///   </li>
///   <li>
///     Unknown: unknown stream.
///   </li>
///   <li>
///     Octoshape: when the stream is a Octoshape stream.
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, StreamType, open) {
/// HTTP: when the stream is a HLS stream.
  StreamTypeHttp = 0,
/// Unknown: unknown stream.
  StreamTypeUnknown = 1,
/// Octoshape: when the stream is a Octoshape stream.
  StreamTypeOctoshape = 2,
/// Config: when the stream is retrieved via a Config file.
  StreamTypeConfig = 3,
/// Config: when the stream is retrieved via a Config file.
  StreamTypeLocal = 4,
/// DRM: when the stream is Fairplay DRM protected.
  StreamTypeDrm = 5,
/// Audio: when the stream is audio only.
  StreamTypeAudio = 6,
};












#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
